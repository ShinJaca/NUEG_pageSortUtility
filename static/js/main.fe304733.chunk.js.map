{"version":3,"sources":["logo.svg","Sorter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sorter","pageNum","a","output","i","push","useStyles","makeStyles","root","background","color","input","paper","width","borderBottomColor","borderColor","App","pages","React","useState","values","setValues","classes","sorter","msg","interval","toString","document","getElementById","value","className","Paper","Grid","container","spacing","padding","margin","justify","item","xs","Typography","variant","component","TextField","label","onChange","event","target","textField","Button","onClick","e","sortBooklet","button","sortTwoPerPage","sortDoubleBooklet","id","multiline","rows","InputLabelProps","shrink","helperText","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe304733.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export default class Sorter {\n  constructor() {\n\n  }\n\n  /**\n   * Cria uma distribução de paginas em ordem de booklet\n   * @param {} pageNum numero de paginas do livreto(multiplos de 4)\n   */\n  sortBooklet(pageNum){\n    let a = 1\n    let output = []\n    if ((pageNum%4)==0) {\n      for (let i = 1; i <= pageNum/4 ; i++) {\n          output.push(pageNum-(a-1))\n          output.push(a)\n          output.push(a+1)\n          output.push(pageNum-a)\n          a+=2\n      }\n      return output\n    }\n  }\n\n  /**\n  * Cria uma distribução de paginas com as paginas duplicadas uma a uma\n  * @param {} pageNum numero de páginas da distribução\n  */\n  sortTwoPerPage(pageNum){\n    let output = []\n    for (var i = 0; i < pageNum; i++) {\n      output.push(i+1)\n      output.push(i+1)\n    }\n    return output\n  }\n\n  /**\n   * Cria uma distribuição de paginas para dois booklets por folha\n   *\n   * @param {*} pageNum numero de paginas a serem distribuídas\n   */\n  sortDoubleBooklet(pageNum){\n    let a = 1\n    let output = []\n    if ((pageNum%4)==0) {\n      for (let i = 1; i <= pageNum/4 ; i++) {\n          output.push(pageNum-(a-1))\n          output.push(a)\n          output.push(pageNum-(a-1))\n          output.push(a)\n          output.push(a+1)\n          output.push(pageNum-a)\n          output.push(a+1)\n          output.push(pageNum-a)\n          a+=2\n      }\n      return output\n    }\n  }\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { fade, withStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/styles'\nimport { Button, TextField, Grid, Paper, Typography } from '@material-ui/core';\nimport Sorter from './Sorter';\n\n\n\nconst useStyles = makeStyles({\n  root: {\n    background: '#292a2f',\n    color: 'white',\n  },\n  input: {\n    color: 'lime'\n  },\n  paper: {\n    background: '#292a2f',\n    width: 300\n  },\n  input: {\n    color: 'lime',\n    '& .MuiInput':{\n      color: 'darkgreen'\n    }\n  },\n  textField:{\n    width: 250,\n    '& label.Mui-focused': {\n      color: 'lime',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: 'lime',\n    },\n    '& .MuiInput-underline:hover:before':{\n      borderBottomColor: 'darkgreen'\n    },\n    '& .MuiInput-input:hover':{\n      color: 'darkgreen'\n    },\n    '& .MuiInput-input:focus':{\n      color: 'lime'\n    },\n    '& .Mui-focused':{\n      borderColor: 'darkgreen'\n    }\n  },\n  button: {\n    width: 200,\n    \n  }\n})\n\n\nfunction App() {\n  const [values, setValues] = React.useState({\n    pages: 24\n  })\n\n  const classes = useStyles()\n  const handleChange = pages => event => {\n    setValues({ ...values, [pages]: event.target.value });\n  };\n\n  const sorter = new Sorter();\n\n  function output(msg) {\n    let interval = msg.toString()\n    document.getElementById('txt_field-saida').value = interval\n  }\n  function handleClickBooklet(e) {\n    // doSort(values.pages)\n    output(sorter.sortBooklet(values.pages))\n  }\n  function handleClickDuplicado(e) {\n    output(sorter.sortTwoPerPage(values.pages))\n  }\n  function handleClickBookletDuplo(e) {\n    output(sorter.sortDoubleBooklet(values.pages))\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Paper className={classes.paper}>\n          <Grid container\n            spacing={2}\n            padding={2}\n            margin=\"normal\"\n            justify=\"center\"\n          >\n            <Grid item\n              xs={12}>\n              <Typography\n                variant=\"h5\"\n                component=\"h3\"\n                color=\"primary\"\n              >\n                Livretto Maestro\n              </Typography>\n            </Grid>\n            <Grid item\n              xs={12}>\n              <TextField\n                label=\"paginas\"\n                value={values.pages}\n                onChange={handleChange('pages')}\n                className={ classes.textField }\n              ></TextField>\n            </Grid>\n            <Grid item\n              xs={12}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickBooklet}\n                className={classes.button}\n              >\n                Booklet\n          </Button>\n            </Grid>\n            <Grid item\n              xs={12}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickDuplicado}\n                className={classes.button}\n              >\n                Duplicado\n          </Button>\n            </Grid>\n            <Grid item\n              xs={12}>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickBookletDuplo}\n                className={classes.button}\n              >\n                Booklet Duplo\n          </Button>\n            </Grid>\n            <Grid item\n              xs={12}>\n              <TextField\n                id=\"txt_field-saida\"\n                label=\"Saida\"\n                multiline\n                rows=\"6\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                className={classes.textField}\n                helperText=\"copie e cole o intervalo de paginas acima na ordem em que está\"\n              >\n              </TextField>\n            </Grid>\n          </Grid>\n        </Paper>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}